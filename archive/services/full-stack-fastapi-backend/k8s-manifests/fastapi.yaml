apiVersion: v1
kind: Namespace
metadata:
  name: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
    apiVersion: v1
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fastapi-sa
  namespace: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
  annotations:
    eks.amazonaws.com/role-arn: ${SERVICE_ACCOUNT_ROLE_ARN} # <-- ARN du rôle IAM lié (facultatif si tu fais de l'IRSA)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-app
  namespace: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
spec:
  replicas: ${ASG_DESIRED_CAPACITY}
  selector:
    matchLabels:
      app: fastapi
  template:
    metadata:
      labels:
        app: fastapi
        project: ${PROJECT_NAME}
        env: ${ENVIRONMENT}
        piercuta.com/node-type: fastapi
    spec:
      nodeSelector:
        piercuta.com/node-type: fastapi
      serviceAccountName: fastapi-sa
      containers:
      - name: fastapi
        image: ${FASTAPI_IMAGE}
        env:
        - name: ENV_NAME
          value: "${ENV_NAME}"
        - name: PROJECT_NAME
          value: "${PROJECT_NAME}"
        - name: POSTGRES_SERVER
          value: "${POSTGRES_SERVER}"
        - name: POSTGRES_USER
          value: "${POSTGRES_USER}"
        - name: FRONTEND_HOST
          value: "${FRONTEND_HOST}"
        - name: AWS_REGION
          value: "${AWS_REGION}"
        - name: AWS_SECRET_ARN
          value: "${AWS_SECRET_ARN}"
        - name: POSTGRES_DB
          value: "${POSTGRES_DB}"
        - name: POSTGRES_PORT
          value: "${POSTGRES_PORT}"
        - name: SECRET_KEY
          value: "${SECRET_KEY}"
        - name: FIRST_SUPERUSER
          value: "${FIRST_SUPERUSER}"
        - name: FIRST_SUPERUSER_PASSWORD
          value: "${FIRST_SUPERUSER_PASSWORD}"
        ports:
        - containerPort: 8000
        resources:
          requests:
            cpu: ${CPU_CAPACITY}
            memory: ${MEM_CAPACITY}
          limits:
            cpu: ${CPU_CAPACITY}
            memory: ${MEM_CAPACITY}
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-service
  namespace: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
spec:
  type: ClusterIP
  selector:
    app: fastapi
  ports:
  - port: 80
    targetPort: 8000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fastapi-hpa
  namespace: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fastapi-app
  minReplicas: ${ASG_MIN_CAPACITY}
  maxReplicas: ${ASG_MAX_CAPACITY}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fastapi-ingress
  namespace: fastapi
  labels:
    app: fastapi
    project: ${PROJECT_NAME}
    env: ${ENVIRONMENT}
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80, "HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: ${CERTIFICATE_ARN}
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/healthcheck-path: /docs
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "10"
    alb.ingress.kubernetes.io/healthy-threshold-count: "3"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fastapi-service
            port:
              number: 80
  tls:
  - hosts:
    - ${DOMAIN_NAME}
